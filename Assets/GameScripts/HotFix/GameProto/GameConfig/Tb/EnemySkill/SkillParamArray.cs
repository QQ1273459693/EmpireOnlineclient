//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace GameConfig.Tb.EnemySkill
{
/// <summary>
/// 技能执行内置属性数组
/// </summary>
public sealed partial class SkillParamArray :  Bright.Config.BeanBase 
{
    public SkillParamArray(ByteBuf _buf) 
    {
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SkilParams = new System.Collections.Generic.List<Tb.EnemySkill.SkillParamValue>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Tb.EnemySkill.SkillParamValue _e0;  _e0 = Tb.EnemySkill.SkillParamValue.DeserializeSkillParamValue(_buf); SkilParams.Add(_e0);}}
        PostInit();
    }

    public static SkillParamArray DeserializeSkillParamArray(ByteBuf _buf)
    {
        return new Tb.EnemySkill.SkillParamArray(_buf);
    }

    /// <summary>
    /// 执行技能属性
    /// </summary>
    public System.Collections.Generic.List<Tb.EnemySkill.SkillParamValue> SkilParams { get; private set; }

    public const int __ID__ = -1412792808;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in SkilParams) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in SkilParams) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "SkilParams:" + Bright.Common.StringUtil.CollectionToString(SkilParams) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}