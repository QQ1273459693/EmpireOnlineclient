//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace GameConfig.enemySkillBase
{
public sealed partial class EnemySkill :  Bright.Config.BeanBase 
{
    public EnemySkill(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Name = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); Name.Add(_e0);}}
        Icon = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Des = new System.Collections.Generic.List<string>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { string _e0;  _e0 = _buf.ReadString(); Des.Add(_e0);}}
        AttackType = (SKILL.TYPE)_buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);AttackParam = new System.Collections.Generic.List<Tb.SwordSkill.SkillFontValue>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Tb.SwordSkill.SkillFontValue _e0;  _e0 = Tb.SwordSkill.SkillFontValue.DeserializeSkillFontValue(_buf); AttackParam.Add(_e0);}}
        {int __n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SkillParam = new Tb.SwordSkill.SkillParamArray[__n0];for(var __index0 = 0 ; __index0 < __n0 ; __index0++) { Tb.SwordSkill.SkillParamArray __e0;__e0 = Tb.SwordSkill.SkillParamArray.DeserializeSkillParamArray(_buf); SkillParam[__index0] = __e0;}}
        PostInit();
    }

    public static EnemySkill DeserializeEnemySkill(ByteBuf _buf)
    {
        return new enemySkillBase.EnemySkill(_buf);
    }

    /// <summary>
    /// 技能ID
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 技能名称
    /// </summary>
    public System.Collections.Generic.List<string> Name { get; private set; }
    /// <summary>
    /// 图标
    /// </summary>
    public string Icon { get; private set; }
    /// <summary>
    /// 技能描述
    /// </summary>
    public System.Collections.Generic.List<string> Des { get; private set; }
    /// <summary>
    /// 技能攻击类型
    /// </summary>
    public SKILL.TYPE AttackType { get; private set; }
    /// <summary>
    /// 技能前置参数
    /// </summary>
    public System.Collections.Generic.List<Tb.SwordSkill.SkillFontValue> AttackParam { get; private set; }
    /// <summary>
    /// 技能执行参数
    /// </summary>
    public Tb.SwordSkill.SkillParamArray[] SkillParam { get; private set; }

    public const int __ID__ = 1647609885;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in AttackParam) { _e?.Resolve(_tables); }
        foreach(var _e in SkillParam) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in AttackParam) { _e?.TranslateText(translator); }
        foreach(var _e in SkillParam) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Bright.Common.StringUtil.CollectionToString(Name) + ","
        + "Icon:" + Icon + ","
        + "Des:" + Bright.Common.StringUtil.CollectionToString(Des) + ","
        + "AttackType:" + AttackType + ","
        + "AttackParam:" + Bright.Common.StringUtil.CollectionToString(AttackParam) + ","
        + "SkillParam:" + Bright.Common.StringUtil.CollectionToString(SkillParam) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}